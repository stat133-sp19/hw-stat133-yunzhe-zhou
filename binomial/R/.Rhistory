return(object)
}
#' @export
print.binvar=function(object,...)
{
string=paste0('"Binomial variable" \n \nParameters \n-number of trials: ',object[1],"\n-prob of success: ",object[2])
cat(string)
}
#' @export
summary.binvar=function(object,...)
{
trials=object$trials
prob=object$prob
mean=aux_mean(trials,prob)
variance=aux_variance(trials,prob)
mode=aux_mode(trials,prob)
skewness=aux_skewness(trials,prob)
kurtosis=aux_kurtosis(trials,prob)
summary=c(trials,prob,mean,variance,mode,skewness,kurtosis)
class(summary)="summary.binvar"
return(summary)
}
#' @export
print.summary.binvar=function(summary,...)
{
string=paste0('"Summary Binomial" \n\nParameters \n-number of trials: ',summary[1],"\n-prob of success: ",summary[2],"\n\n","Measures","\n-mean    :",summary[3],"\n-variance:",summary[4],"\n-mode    :",summary[5],"\n-skewness:",summary[6],"\n-kurtosis:",summary[7])
cat(string)
invisible(object)
}
#' @title the expected value of the binomial distribution
#' @description calculate the expected value of the binomial distribution
#' @param trials number of trials (numeric)
#' @param prob probability (numeric)
#' @return computed expected value
#' @export
#' @examples
#' bin_mean(trials=5,prob=0.5)
bin_mean=function(trials,prob)
{
check_trials(trials)
check_prob(prob)
mean=aux_mean(trials,prob)
return(mean)
}
#' @title the variance of the binomial distribution
#' @description calculate the variance of the binomial distribution
#' @param trials number of trials (numeric)
#' @param prob probability (numeric)
#' @return computed variance value
#' @export
#' @examples
#' bin_variance(trials=5,prob=0.5)
bin_variance=function(trials,prob)
{
check_trials(trials)
check_prob(prob)
variance=aux_variance(trials,prob)
return(variance)
}
#' @title the mode of the binomial distribution
#' @description calculate the mode of the binomial distribution
#' @param trials number of trials (numeric)
#' @param prob probability (numeric)
#' @return computed mode value
#' @export
#' @examples
#' bin_mode(trials=5,prob=0.5)
bin_mode=function(trials,prob)
{
check_trials(trials)
check_prob(prob)
mode=aux_mode(trials,prob)
return(mode)
}
#' @title the skewness of the binomial distribution
#' @description calculate the skewness of the binomial distribution
#' @param trials number of trials (numeric)
#' @param prob probability (numeric)
#' @return computed skewness value
#' @export
#' @examples
#' bin_skewness(trials=5,prob=0.5)
bin_skewness=function(trials,prob)
{
check_trials(trials)
check_prob(prob)
skewness=aux_skewness(trials,prob)
return(skewness)
}
#' @title the kurtosis of the binomial distribution
#' @description calculate the kurtosis of the binomial distribution
#' @param trials number of trials (numeric)
#' @param prob probability (numeric)
#' @return computed kurtosis value
#' @export
#' @examples
#' bin_kurtosis(trials=5,prob=0.5)
bin_kurtosis=function(trials,prob)
{
check_trials(trials)
check_prob(prob)
kurtosis=aux_kurtosis(trials,prob)
return(kurtosis)
}
class(bin1)
bin1
library(binomial)
bin1=bin_variable(trials=5,prob=0.3)
probability=bin_probability(success=3,trials=5,prob=0.3)
choose <- bin_choose(n = 10, k = 3)
choose
# Output
#   error message or TRUE
check_trials=function(trials)
{
if(length(trials)!=1)
{
stop("the length of trials should be 1")
} else if(class(trials)!="numeric"){
stop("invalid trials value")
} else if (floor(trials)!=trials | trials<0) {
stop("trials should be a non-negative integar")
} else{
return(TRUE)
}
}
# Description: check the validity of success and trials
# Inputs
#   prob: success and trials value
# Output
#   error message or TRUE
check_success=function(success,trials)
{
judge=function(success)
{
for(i in 1:length(success))
{
if(success[i]<0 | floor(success[i])!=success[i])
return(FALSE)
}
return(TRUE)
}
if(is.vector(success)==FALSE)
{
stop("invalid success value")
} else if(class(success)!="numeric"){
stop("invalid success value")
} else if(judge(success)==FALSE){
stop("success should be a vector of non-negative intergers")
} else if(max(success)>trials){
stop("success cannot be greater than trials")
} else{
return(TRUE)
}
}
# Description: calculate the expected value of the binomial distribution
# Inputs
#   prob and trials value
# Output
#   mean
aux_mean=function(trials,prob)
{
mean=prob*trials
return(mean)
}
# Description: calculate the variance of the binomial distribution
# Inputs
#   prob: success and trials value
# Output
#   variance
aux_variance=function(trials,prob)
{
variance=trials*prob*(1-prob)
return(variance)
}
# Description: calculate the mode of the binomial distribution
# Inputs
#   prob: success and trials value
# Output
#   mode
aux_mode=function(trials,prob)
{
m=prob*trials+prob
if(is.integer(m))
{
mode=c(m-1,m)
} else
{
mode=floor(m)
}
return(mode)
}
# Description: calculate the skewness of the binomial distribution
# Inputs
#   prob: success and trials value
# Output
#   skewness
aux_skewness=function(trials,prob)
{
if(prob==0|prob==1)
{
return('Undefined')
} else{
skewness=(1-2*prob)/sqrt(trials*prob*(1-prob))
return(skewness)
}
}
# Description: calculate the kurtosis of the binomial distribution
# Inputs
#   prob: success and trials value
# Output
#   kurtosis
aux_kurtosis=function(trials,prob)
{
if(prob==0|prob==1)
{
return('Undefined')
} else{
kurtosis=(1-6*prob*(1-prob))/(trials*prob*(1-prob))
return(kurtosis)
}
}
probability=bin_probability(success=3,trials=5,prob=0.3)
bin1=bin_variable(trials=5,prob=0.3)
# Description: check the validity of probability value
# Inputs
#   prob: probability value
# Output
#   error message or TRUE
check_prob=function(prob)
{
if(length(prob)!=1)
{
stop("the length of prob should be 1")
} else if(class(prob)!="numeric")
{
stop("invalid prob value")
} else if (prob>1 | prob<0) {
stop("p has to be a number between 0 and 1")
} else{
return(TRUE)
}
}
# Description: check the validity of trials value
# Inputs
#   prob: probability value
# Output
#   error message or TRUE
check_trials=function(trials)
{
if(length(trials)!=1)
{
stop("the length of trials should be 1")
} else if(class(trials)!="numeric"){
stop("invalid trials value")
} else if (floor(trials)!=trials | trials<0) {
stop("trials should be a non-negative integar")
} else{
return(TRUE)
}
}
# Description: check the validity of success and trials
# Inputs
#   prob: success and trials value
# Output
#   error message or TRUE
check_success=function(success,trials)
{
judge=function(success)
{
for(i in 1:length(success))
{
if(success[i]<0 | floor(success[i])!=success[i])
return(FALSE)
}
return(TRUE)
}
if(is.vector(success)==FALSE)
{
stop("invalid success value")
} else if(class(success)!="numeric"){
stop("invalid success value")
} else if(judge(success)==FALSE){
stop("success should be a vector of non-negative intergers")
} else if(max(success)>trials){
stop("success cannot be greater than trials")
} else{
return(TRUE)
}
}
probability=bin_probability(success=3,trials=5,prob=0.3)
probability
bin1=bin_variable(trials=5,prob=0.3)
bin1
class(bin1)
class(summary(bin1)
)
# You can learn more about package authoring with RStudio at:
#
#   http://r-pkgs.had.co.nz/
#
# Some useful keyboard shortcuts for package authoring:
#
#   Build and Reload Package:  'Cmd + Shift + B'
#   Check Package:             'Cmd + Shift + E'
#   Test Package:              'Cmd + Shift + T'
source("R/private_summary.R")
source("R/private_checker.R")
#' @title the number of combinations
#' @description calculates the number of combinations
#' @param n the number of trials (numeric)
#' @param k a vector of number of success (numeric)
#' @return computed combinations
#' @export
#' @examples
#' bin_choose(n=5,k=2)
#' bin_choose(5,4)
#' bin_choose(4,1:3)
bin_choose=function(n,k)
{
if(k>n)
stop("k cannot be greater than n")
combination=factorial(n)/(factorial(k)*factorial(n-k))
return(combination)
}
#' @title binomial probability
#' @description calculates the binomial probability
#' @param trials number of trials (numeric)
#' @param success a vector of number of successes (numeric)
#' @param prob probability (numeric)
#' @return computed combinations
#' @export
#' @examples
#' bin_probability(success=2,trials=5,prob=0.5)
#' bin_probability(success=0:2,trials=5,prob=0.5)
#' bin_probability(success = 55, trials = 100, prob = 0.45)
bin_probability=function(success,trials,prob)
{
check_prob(prob)
check_trials(trials)
check_success(success,trials)
bin_probability=choose(trials,success)*prob^success*(1-prob)^(trials-success)
return(bin_probability)
}
#' @title binomial distribution
#' @description calculates the binomial distribution
#' @param trials number of trials (numeric)
#' @param prob probability (numeric)
#' @return computed binomial distribution
#' @export
#' @examples
#' bin_distribution(trials=5,prob=0.5)
bin_distribution=function(trials,prob)
{
success=c()
probability=c()
for(i in 1:(trials+1))
{
success[i]=i-1
probability[i]=bin_probability(i-1,trials,prob)
}
table=data.frame(success,probability)
class(table)=c("bindis","data.frame")
return(table)
}
#' @export
plot.bindis=function(object)
{
barplot(object$probability,names.arg = object$success,xlab="successes",ylab="probability")
}
#' @title binomial cumulative distribution
#' @description calculates the binomial cumulative distribution
#' @param trials number of trials (numeric)
#' @param prob probability (numeric)
#' @return computed binomial cumulative distribution
#' @export
#' @examples
#' bin_cumulative(trials=5,prob=0.5)
bin_cumulative=function(trials,prob)
{
table=bin_distribution(trials,prob)
for(i in 1:trials)
{
table[i+1,2]=table[i,2]+ table[i+1,2]
}
class(table)=c("bincum","data.frame")
return(table)
}
#' @export
plot.bincum=function(object)
{
plot(object$success,object$probability,type="o",xlab="successes",ylab="probability")
}
#' @title object of class "binvar"
#' @description return an object of class "binvar"
#' @param trials number of trials (numeric)
#' @param prob probability (numeric)
#' @return object (binvar)
#' @export
#' @examples
#' bin_variable(trials=5,prob=0.5)
bin_variable=function(trials,prob)
{
check_trials(trials)
check_prob(prob)
object=list(trials=trials,prob=prob)
class(object)="binvar"
return(object)
}
#' @export
print.binvar=function(object,...)
{
string=paste0('"Binomial variable" \n \nParameters \n-number of trials: ',object[1],"\n-prob of success: ",object[2])
cat(string)
}
#' @export
summary.binvar=function(object,...)
{
trials=object$trials
prob=object$prob
mean=aux_mean(trials,prob)
variance=aux_variance(trials,prob)
mode=aux_mode(trials,prob)
skewness=aux_skewness(trials,prob)
kurtosis=aux_kurtosis(trials,prob)
summary=c(trials,prob,mean,variance,mode,skewness,kurtosis)
class(summary)="summary.binvar"
return(summary)
}
#' @export
print.summary.binvar=function(summary,...)
{
string=paste0('"Summary Binomial" \n\nParameters \n-number of trials: ',summary[1],"\n-prob of success: ",summary[2],"\n\n","Measures","\n-mean    :",summary[3],"\n-variance:",summary[4],"\n-mode    :",summary[5],"\n-skewness:",summary[6],"\n-kurtosis:",summary[7])
cat(string)
invisible(object)
}
#' @title the expected value of the binomial distribution
#' @description calculate the expected value of the binomial distribution
#' @param trials number of trials (numeric)
#' @param prob probability (numeric)
#' @return computed expected value
#' @export
#' @examples
#' bin_mean(trials=5,prob=0.5)
bin_mean=function(trials,prob)
{
check_trials(trials)
check_prob(prob)
mean=aux_mean(trials,prob)
return(mean)
}
#' @title the variance of the binomial distribution
#' @description calculate the variance of the binomial distribution
#' @param trials number of trials (numeric)
#' @param prob probability (numeric)
#' @return computed variance value
#' @export
#' @examples
#' bin_variance(trials=5,prob=0.5)
bin_variance=function(trials,prob)
{
check_trials(trials)
check_prob(prob)
variance=aux_variance(trials,prob)
return(variance)
}
#' @title the mode of the binomial distribution
#' @description calculate the mode of the binomial distribution
#' @param trials number of trials (numeric)
#' @param prob probability (numeric)
#' @return computed mode value
#' @export
#' @examples
#' bin_mode(trials=5,prob=0.5)
bin_mode=function(trials,prob)
{
check_trials(trials)
check_prob(prob)
mode=aux_mode(trials,prob)
return(mode)
}
#' @title the skewness of the binomial distribution
#' @description calculate the skewness of the binomial distribution
#' @param trials number of trials (numeric)
#' @param prob probability (numeric)
#' @return computed skewness value
#' @export
#' @examples
#' bin_skewness(trials=5,prob=0.5)
bin_skewness=function(trials,prob)
{
check_trials(trials)
check_prob(prob)
skewness=aux_skewness(trials,prob)
return(skewness)
}
#' @title the kurtosis of the binomial distribution
#' @description calculate the kurtosis of the binomial distribution
#' @param trials number of trials (numeric)
#' @param prob probability (numeric)
#' @return computed kurtosis value
#' @export
#' @examples
#' bin_kurtosis(trials=5,prob=0.5)
bin_kurtosis=function(trials,prob)
{
check_trials(trials)
check_prob(prob)
kurtosis=aux_kurtosis(trials,prob)
return(kurtosis)
}
summary(bin1)
