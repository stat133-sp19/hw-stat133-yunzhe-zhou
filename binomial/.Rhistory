p=inv.logit(p)
y[i]=sample(c(0,1),1,prob = c(1-p,p))
}
g_1=function(a,w)
{
l=length(w)
result=1/(1+exp(-w))
for(i in 1:l)
{
if(a[i]==0)
{
result[i]=1-result[i]
}
}
return(result)
}
library(gtools)
n=1000
w=runif(n,-1,1)
a=c()
y=c()
a0=rep(0,n)
a1=rep(1,n)
inv_w=inv.logit(w)
for(i in 1:n)
{
a[i]=sample(c(0,1),1,prob = c(1-inv_w[i],inv_w[i]))
p=-3+a[i]-0.5*w[i]+0.25*a[i]*w[i]
p=inv.logit(p)
y[i]=sample(c(0,1),1,prob = c(1-p,p))
}
g_1=function(a,w)
{
l=length(w)
result=1/(1+exp(-w))
for(i in 1:l)
{
if(a[i]==0)
{
result[i]=1-result[i]
}
}
return(result)
}
library(dplyr)
o=data.frame(w,a,y)
o_1=o
o_0=o
o_1$a=1
o_0$a=0
multiply=w*a
Q=glm(y~a+w+multiply,data=o,family="binomial")
g=glm(a~w,data=o,family="binomial")
QAW=predict(Q,type="response")
Q0W=predict(Q,newdata=o_0,type="response")
Q1W=predict(Q,newdata=o_1,type="response")
g_n=predict(g,type="response")
g0_n=function(a,w)
{
l=length(w)
coef=g$coefficients
result=coef[1]+coef[2]*w
result=1/(1+exp(-w))
for(i in 1:l)
{
if(a[i]==0)
{
result[i]=1-result[i]
}
}
return(result)
}
psai=mean(y*g_1(a,w)/g0_n(a,w))
one_psai=mean(Q0W*g_1(a0,w)+Q1W*g_1(a1,w)+g_1(a,w)/g0_n(a,w)*(y-Q0W))
IC=Q0W*g_1(a0,w)+Q1W*g_1(a1,w)-one_psai+g_1(a,w)/g0_n(a,w)*(y-Q0W)
var=var(IC)
interval=1.96*sqrt(var(IC)/n)
up_interval=one_psai+interval
down_interval=one_psai-interval
table=data.frame(psai0,one_psai,var,down_interval,up_interval)
table
library(dplyr)
o=data.frame(w,a,y)
o_1=o
o_0=o
o_1$a=1
o_0$a=0
multiply=w*a
Q=glm(y~a+w+multiply,data=o,family="binomial")
g=glm(a~w,data=o,family="binomial")
QAW=predict(Q,type="response")
Q0W=predict(Q,newdata=o_0,type="response")
Q1W=predict(Q,newdata=o_1,type="response")
g_n=predict(g,type="response")
g0_n=function(a,w)
{
l=length(w)
coef=g$coefficients
result=coef[1]+coef[2]*w
result=1/(1+exp(-w))
for(i in 1:l)
{
if(a[i]==0)
{
result[i]=1-result[i]
}
}
return(result)
}
psai=mean(y*g_1(a,w)/g0_n(a,w))
one_psai=mean(Q0W*g_1(a0,w)+Q1W*g_1(a1,w)+g_1(a,w)/g0_n(a,w)*(y-Q0W))
IC=Q0W*g_1(a0,w)+Q1W*g_1(a1,w)-one_psai+g_1(a,w)/g0_n(a,w)*(y-Q0W)
var=var(IC)
interval=1.96*sqrt(var(IC)/n)
up_interval=one_psai+interval
down_interval=one_psai-interval
table=data.frame(psai0,one_psai,var,down_interval,up_interval)
table
interval=c()
up_interval=c()
down_interval=c()
psai=c()
one_psai=c()
count=0
times=1000
psai0=0.084324089
for(t in 1:times)
{
library(gtools)
set.seed(t)
n=1000
w=runif(n,-1,1)
a=c()
y=c()
a0=rep(0,n)
a1=rep(1,n)
inv_w=inv.logit(w)
for(i in 1:n)
{
a[i]=sample(c(0,1),1,prob = c(1-inv_w[i],inv_w[i]))
p=-3+a[i]-0.5*w[i]+0.25*a[i]*w[i]
p=inv.logit(p)
y[i]=sample(c(0,1),1,prob = c(1-p,p))
}
g_1=function(a,w)
{
l=length(w)
result=1/(1+exp(-w))
for(i in 1:l)
{
if(a[i]==0)
{
result[i]=1-result[i]
}
}
return(result)
}
library(dplyr)
o=data.frame(w,a,y)
o_1=o
o_0=o
o_1$a=1
o_0$a=0
multiply=w*a
Q=glm(y~a+w+multiply,data=o,family="binomial")
g=glm(a~w,data=o,family="binomial")
QAW=predict(Q,type="response")
Q0W=predict(Q,newdata=o_0,type="response")
Q1W=predict(Q,newdata=o_1,type="response")
g_n=predict(g,type="response")
g0_n=function(a,w)
{
l=length(w)
coef=g$coefficients
result=coef[1]+coef[2]*w
result=1/(1+exp(-w))
for(i in 1:l)
{
if(a[i]==0)
{
result[i]=1-result[i]
}
}
return(result)
}
psai[t]=mean(y*g_1(a,w)/g0_n(a,w))
one_psai[t]=mean(Q0W*g_1(a0,w)+Q1W*g_1(a1,w)+g_1(a,w)/g0_n(a,w)*(y-Q0W))
IC=Q0W*g_1(a0,w)+Q1W*g_1(a1,w)-one_psai[t]+g_1(a,w)/g0_n(a,w)*(y-Q0W)
interval[t]=1.96*sqrt(var(IC)/n)
up_interval[t]=one_psai[t]+interval[t]
down_interval[t]=one_psai[t]-interval[t]
if(psai0<down_interval[t] | psai0>up_interval[t])
{
count=count+1
}
}
table=data.frame(psai0,one_psai,down_interval,up_interval)
1-count/times
count
#the 20 head results
head(table,20)
IC
mean(IC)
psai=mean(y*g_1(a,w)/g0_n(a,w))
psai
table=data.frame(psai0,psai,one_psai,down_interval,up_interval)
1-count/times
#the 20 head results
head(table,20)
interval=c()
up_interval=c()
down_interval=c()
psai=c()
one_psai=c()
count=0
times=1000
psai0=0.084324089
for(t in 1:times)
{
library(gtools)
set.seed(t)
n=1000
w=runif(n,-1,1)
a=c()
y=c()
a0=rep(0,n)
a1=rep(1,n)
inv_w=inv.logit(w)
for(i in 1:n)
{
a[i]=sample(c(0,1),1,prob = c(1-inv_w[i],inv_w[i]))
p=-3+a[i]-0.5*w[i]+0.25*a[i]*w[i]
p=inv.logit(p)
y[i]=sample(c(0,1),1,prob = c(1-p,p))
}
g_1=function(a,w)
{
l=length(w)
result=1/(1+exp(-w))
for(i in 1:l)
{
if(a[i]==0)
{
result[i]=1-result[i]
}
}
return(result)
}
library(dplyr)
o=data.frame(w,a,y)
o_1=o
o_0=o
o_1$a=1
o_0$a=0
multiply=w*a
Q=glm(y~a+w+multiply,data=o,family="binomial")
g=glm(a~w,data=o,family="binomial")
QAW=predict(Q,type="response")
Q0W=predict(Q,newdata=o_0,type="response")
Q1W=predict(Q,newdata=o_1,type="response")
g_n=predict(g,type="response")
g0_n=function(a,w)
{
l=length(w)
coef=g$coefficients
result=coef[1]+coef[2]*w
result=1/(1+exp(-w))
for(i in 1:l)
{
if(a[i]==0)
{
result[i]=1-result[i]
}
}
return(result)
}
psai[t]=mean(y*g_1(a,w)/g0_n(a,w))
one_psai[t]=mean(Q0W*g_1(a0,w)+Q1W*g_1(a1,w)+g_1(a,w)/g0_n(a,w)*(y-Q0W))
IC=Q0W*g_1(a0,w)+Q1W*g_1(a1,w)-one_psai[t]+g_1(a,w)/g0_n(a,w)*(y-Q0W)
interval[t]=1.96*sqrt(var(IC)/n)
up_interval[t]=one_psai[t]+interval[t]
down_interval[t]=one_psai[t]-interval[t]
if(psai0<down_interval[t] | psai0>up_interval[t])
{
count=count+1
}
}
table=data.frame(psai0,psai,one_psai,down_interval,up_interval)
1-count/times
#the 20 head results
head(table,20)
library(dplyr)
o=data.frame(w,a,y)
o_1=o
o_0=o
o_1$a=1
o_0$a=0
multiply=w*a
Q=glm(y~a+w+multiply,data=o,family="binomial")
g=glm(a~w,data=o,family="binomial")
QAW=predict(Q,type="response")
Q0W=predict(Q,newdata=o_0,type="response")
Q1W=predict(Q,newdata=o_1,type="response")
g_n=predict(g,type="response")
g0_n=function(a,w)
{
l=length(w)
coef=g$coefficients
result=coef[1]+coef[2]*w
result=1/(1+exp(-w))
for(i in 1:l)
{
if(a[i]==0)
{
result[i]=1-result[i]
}
}
return(result)
}
psai=mean(y*g_1(a,w)/g0_n(a,w))
one_psai=mean(Q0W*g_1(a0,w)+Q1W*g_1(a1,w)+g_1(a,w)/g0_n(a,w)*(y-QAW))
IC=Q0W*g_1(a0,w)+Q1W*g_1(a1,w)-one_psai+g_1(a,w)/g0_n(a,w)*(y-QAW)
var=var(IC)
interval=1.96*sqrt(var(IC)/n)
up_interval=one_psai+interval
down_interval=one_psai-interval
table=data.frame(psai0,one_psai,var,down_interval,up_interval)
table
interval=c()
up_interval=c()
down_interval=c()
psai=c()
one_psai=c()
count=0
times=1000
psai0=0.084324089
for(t in 1:times)
{
library(gtools)
set.seed(t)
n=1000
w=runif(n,-1,1)
a=c()
y=c()
a0=rep(0,n)
a1=rep(1,n)
inv_w=inv.logit(w)
for(i in 1:n)
{
a[i]=sample(c(0,1),1,prob = c(1-inv_w[i],inv_w[i]))
p=-3+a[i]-0.5*w[i]+0.25*a[i]*w[i]
p=inv.logit(p)
y[i]=sample(c(0,1),1,prob = c(1-p,p))
}
g_1=function(a,w)
{
l=length(w)
result=1/(1+exp(-w))
for(i in 1:l)
{
if(a[i]==0)
{
result[i]=1-result[i]
}
}
return(result)
}
library(dplyr)
o=data.frame(w,a,y)
o_1=o
o_0=o
o_1$a=1
o_0$a=0
multiply=w*a
Q=glm(y~a+w+multiply,data=o,family="binomial")
g=glm(a~w,data=o,family="binomial")
QAW=predict(Q,type="response")
Q0W=predict(Q,newdata=o_0,type="response")
Q1W=predict(Q,newdata=o_1,type="response")
g_n=predict(g,type="response")
g0_n=function(a,w)
{
l=length(w)
coef=g$coefficients
result=coef[1]+coef[2]*w
result=1/(1+exp(-w))
for(i in 1:l)
{
if(a[i]==0)
{
result[i]=1-result[i]
}
}
return(result)
}
psai[t]=mean(y*g_1(a,w)/g0_n(a,w))
one_psai[t]=mean(Q0W*g_1(a0,w)+Q1W*g_1(a1,w)+g_1(a,w)/g0_n(a,w)*(y-QAW))
IC=Q0W*g_1(a0,w)+Q1W*g_1(a1,w)-one_psai[t]+g_1(a,w)/g0_n(a,w)*(y-QAW)
interval[t]=1.96*sqrt(var(IC)/n)
up_interval[t]=one_psai[t]+interval[t]
down_interval[t]=one_psai[t]-interval[t]
if(psai0<down_interval[t] | psai0>up_interval[t])
{
count=count+1
}
}
table=data.frame(psai0,psai,one_psai,down_interval,up_interval)
1-count/times
#the 20 head results
head(table,20)
library(binomial)
devtools::document()
devtools::test()
floor(4)
class(floor(4))
library(binomial)
devtools::build_vignettes()
devtools::build()
devtools::document()
devtools::install()
devtools::check()
is.vector(0:2)
check_success(0:2)
class(0:2)
class(3)
check_success(0:2)
check_success=function(success,trials)
{
judge=function(success)
{
for(i in 1:length(success))
{
if(success[i]<0 | floor(success[i])!=success[i])
return(FALSE)
}
return(TRUE)
}
if(is.vector(success)==FALSE)
{
stop("invalid success value")
} else if(class(success)!="numeric"&class(success!="integer")){
stop("invalid success value")
} else if(judge(success)==FALSE){
stop("success should be a vector of non-negative intergers")
} else if(max(success)>trials){
stop("success cannot be greater than trials")
} else{
return(TRUE)
}
}
check_success(0:2)
check_success=function(success,trials)
{
judge=function(success)
{
for(i in 1:length(success))
{
if(success[i]<0 | floor(success[i])!=success[i])
return(FALSE)
}
return(TRUE)
}
if(is.vector(success)==FALSE)
{
stop("invalid success value")
} else if(class(success)!="numeric"&class(success)!="integer"){
stop("invalid success value")
} else if(judge(success)==FALSE){
stop("success should be a vector of non-negative intergers")
} else if(max(success)>trials){
stop("success cannot be greater than trials")
} else{
return(TRUE)
}
}
check_success(0:2)
check_success(0:2,3)
library(binomial)
devtools::document()
devtools::test()
devtools::build_vignettes()
devtools::check()
library(graphics)
library(plotl)
library(plot)
library(binomial)
devtools::check()
library(binomial)
devtools::document()
devtools::check()
library(binomial)
devtools::document()
devtools::document()
devtools::document()
devtools::check()
library(binomial)
devtools::document()
devtools::test()
library(binomial)
devtools::document()
devtools::check()
library(binomial)
devtools::document()
devtools::check()
library(qpdf)
install.packages("qpdf")
library(binomial)
devtools::document()
devtools::check()
library(binomial)
devtools::document()
devtools::check()
